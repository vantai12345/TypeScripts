lý do lên học typescript
- javasctipt linh hoạt 
-không cần phải khai báo định nghĩa
- code nhanh khi làm 1 mihhf
- cần phải hiều rõ về javasctipt để tránh lỗi vặt 

khó có thể có ngywfoi mơi mà ngangn đi vào 1 dự án đang  làm dở

typescript 
hường được lợi ích lớn từ việc auto complete 
giúp ít gặp looooic đặc biệt là typo
-gặp khó khi chuyển kiểu dữ liệu dối với người mới 
- nhưng mà code rất ok hơn sau khi thuần thục 
- nên làm việc mới taem dễ cho các bạn mới ấn dấu chấm thì nó sẽ hỗ trợ cho người mới giúp dễ dàng hơn 
- mới vô ban đầu thì tồn thời gian setup  còn về sau nó sẽ dễ dàng hơn 
=> lúc đầu thì sẽ chậm hơn còn càng về sau thì nó sẽ nhanh hơn an toàn hơn 

nếu như 1 dự án đang dùng javascript có thể chuyển sang typescript được 
nên dùng any để chuyển qua typescript   đảm bảo rằng code còn chạy được 
- nhưng không nên dùng any nhiều



làm sao dể thực thi được file typescript 
  cần công cụ để chuyển đổi typescript sang javascript 
	yarn global add typescript ts-node ts-lisb @types/node

sau khi cài nó trong vscode rồi bước tiếp theo là làm tsc index.ts
rồi bước tiếp thèo là node index.js
tóm lại để làm 2 cái đó thì ta có lệnh ts-node index.ts thì nó nhanh hơn
 


1-4 


2-1

những điều cơ bản của typescript
1 static type checking : là nó giúp mình hiểu xem mình có những kiểu dữ liệu nào 
- nó kiểm tra lỗi nhanh khi đang code 
- giúp chánh được lỗi  typo( lỗi phổ  biển trong javascript)
2 types for tooling
- ngoài việc báo looix khi code 
- typescript nó cong có thể giúp mình hạn chế  bằng việc hỗ chợ auto completions/ suggestions
- nhắc code khi đang code giúp mình hạn chế lỗi 
3 tsc - typescript complier
-npm install -g typesctipt
khi ấn tsc thì nó sẽ chuyển tất cả file ts sang js 
 



2-2 explict types vs infered types


1 exloict types 
- khai báo kiểu dữ liệu dùng dấu : sau tên biến 
2 infered types
- typescript thông mình detect (phát hiện ) được dữ liệu tương fuengs ngya khi mình không khai báo cụ thể kiểu dữ liệu 
- nó tự dộng hiểu được là dữ lieuj đó dạng nào 
- có một số thì typescript nó không thể hiểu được thì nó sẽ đưa ra kiểu dữ liệu any
3 eraised types
- sau cùng cũng phải vhuyeenr qua javascript , tất cả những thứ liên quan đến khai báo kiểu dữ liệu định nghĩa kieur dữ liệu thì nó sẽ biến mất đi  để nó có thể hieur được 
4 downleveling
- tùy vào target mà code sau khi đươc compile ra javascript sé khác nhau để đapr bảo target phiên bản mới nhất để đáp ứng được khi chuyển qua javascript 

2-3: Strictness tìm hiều về strict flag ( độ khó tính)
1 Strict flag là gì 
-bật Sstrics = true nếu bật nó lên true thì nó sẽ bật hết tất cả các strict khác
2 option: nolmplicitany
- khi typescript không thể xác định dược kiểu dữ liệu của một biế nòa đóa , thì biến đó  nó sẽ được mang kiểu dữ liệu any
- khi bật  nolmplicitany= true thì nếu có dữ liệu nào là any thì nó sẽ đưa ra lỗi
3 option : strictNullChecks
- khi bật lên thì giúp mình kiểm tra nó là null/ undefined hay không thì nó sẽ báo lỗi 
4 option : alwaysStrict
- khi bật true thì typesctipt sec liuoon pare files ở chế độ strict mode và sẽ có "use strict " ỏe đầu file javascript được tạo ra
- luôn luôn nên bật nó 
5 other options
- strictbindcallapply đảm bảo bind call và apply được gọi được đúng cái tham số , hàm mà mình đã định nghĩa trước đó 
- strictfunctiontypes ddparp bảo chuyển đúng dữ liệu của hàm nhưng hàm nay thì phải được tạo lên bằng keyword function (không ap dụng cho methob)



 2-4 aqualyty / comparison in typescript (điều kiện so sánh trong typescript)
1 nhắc lại về == và === bên javascript
- so sánh khác kiểu dữ liệ == thì được chuyển về number để so sánh
- với 3 dấu === thì dữ nguyên giá trị  để so sánh 
2 so sánh bên javascript
 - nó đi theo hướng kiểm tra kiểu dữ liệu cho dù mình có dùng 2 dấu 3 dấu thì nó cũng báo lỗi hết
3 so  sánh object
- object array và function là tham chiếu 
- khi so sánh 2 tham vhieuef , thì đụa chỉ được so sánh , chứ không phải giá trị thật sự
- so sánh 2 tham chiếu nó mà giống địa chỉ thì bằng nhau còn địa chỉ khác nhau thì nó sẽ khác nhau 
-  thương so sánh thì dựa vào id thôi là được rồi chứ không cần so ssanhs cả object
4 null vs undefined 
- nếu như bạn muốn chỉ định cái đó mà chưa khởi tạo thì undefined
- conf nếu khởi tạo rồi mà không có thì là null
- null==undefined (true) chỉ có 2 kiểu dữ liệu này mới bằng nhau thôi còn lại false hết
null==0 (false)
null>=0 (true)
kiểm tra câu điệu kiện
 if(something == null){}  // either null or undefined
 if (something ){}// truethy value
 if (!something ){}// falsethy value
 kiểm tra biến global có tồn tại hay khong 
 if (typeof window !== 'undefined')


 2-5 cost let và cahs đặt tên biến đúng chuẩn


 1 when to use cost 
 - nên ưu tiên dùng cost  let có khẳ năng bị thay đổi còn cost thì không htay đổi  dễ sử dụng hơn 
- dùng cho hăng số  UPER_CASE 
- dùng vho biến mà không có nhu cầu thay dổi giá trị  (camlcase)
vd: chuỗi , số  true/false
 - cost thì có thể thay đổi được thuộc tính trong object
 - cost chỉ cho ta gán 1 object mà thôi không thể gán nhieuf object
 2 when to use let
 - dùn cho những biến có nhu cầu thay đổi thực hiện phép gán 
 3 naming convention 
 đặt tên biến hằng số   UPER_CASE là viết hóa tất cả
 đaẹt tên theo biến boolean  camlcase là đặt tên có nghĩa đúng hoặc sai 
 tên biến số ít camlcase  nên dùng danh từ số ít 
 đặt tên biến số nhiêu là danh từ số nhiều  thường thêm chữ (list)
 tên hàm camlcase đăt ở thể động từ 
 lưu ý không nên đặt tiếng việt cho tên biến 


 2-6 truethy vs falsethy
 ngoài những cái nau ra thì nó sẽ là truethy
 0 là falsethy
 -0 là falsethy
 '' "" 
NAN 
undefined
null
document.all

chek if false (use ! operator)
if (!studentId) {} true
if (!isSelected){} true

còn kiểm tra truethy thì không có !

check length
if (name.length){} //BAD
if (name.length>0){}// good 
if (studentList.length) {}      
if (studentList.length >0) {} nếu có >0 thì nó sẽ dễ hiệu hơn cho người đọc 
- 0 là false còn 12345 là tru nên nó khó hiểu cho người đọc 
! là phủ định lại 
!! là phủ định của phủ định chuyển biến của mình về kiểu dữ liệu boolean

vd const student = {id: 1 , name: 'alice'};
const hasStudent1 = !! student?.id; //true
const hasStudent2 == boolean(Student?.id): // true 
- viết theo cách thứ 2 nó sẽ tưởng minh hơn 




2-7 dectructuring


1 object dectructuring 
- đúc trích dữ liệu của nó ra 
vd interface Student {
  is: number;
  name: string;
  age: number;
  gender : String;

}
const bob = {
  id:1,
  name: 'bob',
  age: 18,
  gender: 'male'
};

kiểu cũ 
const id == bob.id;
const name= bob.name;
kiểu mới  
const{is,name} = bob; 
kiểu này nó sẽ nhanh hơn


- rest gom 1 danh sách gì đó thành 1
const bob = {
  id:1,
  name: 'bob',
  age: 18,
  gender: 'male'
};

đây là cachs viết cũ 
const id = bob.id;
const rest = {
  name: bob.name,
  age: bob.age,
  gender:bob.gender,
}
 
// cách viết mới 
const { id, ...rest}= bob;
cái ...rest nó sẽ gom những thuộc tính như name ,age, gender gộp lại thành 1 object

spread pperator

vd 
const bob1 = { 
  id: 1, 
  name: 'bob1'
  age : 18,
  gender: 'male'

};

const bob2 = {
  ...bob1,
  name: 'bob2'

};
...bob1 nó gom tất cả thuộc tính ở trên bob1 rồi
nó có thểm thêm thuộc tính được trong bob2 vd ở trên 
 
2 aray dectructuring
nó tương tự như object
rest operator thì gom nó lại thành 1 cục vd //1,2,3[4,5,6]
còn spread operator tì nó tản ra [1,2,3,4,5,6]

vd 
let x=5;
let y=10;

cách thông thường 
let temp= x;
x=y;//10
y=temp;//5
cahcs mới 
[y,x]=[x,y];
nó cũng giống kêt quả như ở trên nhưng ngắn gọn hơn


3-1 tổng quan về type sytem
các kieur dữ liệu baj biết bên javascript
 primitive number, boolean,string , null , undefined symbol
 refernece array, object function
 còn typescript bạn sec baets gặp any, unknown, void, never...

 dùng any thì nó cso thể dùng bất cứ dữ liệu nào cũng được
khuyến cáo không nên dùng any nhiều 
- nêu khai báo kieur dữ liệu đơn giản như string , number thì typescript đủ thông minh để suy luận kiểu dữ liệu cho nó 
 
 1 literal types
- dùng kiểu này thì mình có thể lấy kiểu dữ liệu là giá trị cụ thể  luôn
vd 
let count: 1; //kieur dữ liệu của count là số 1 luôn chứ không phải là number nó là tập hợp con của kieruw dữ liệu number
let name : 'typescript': kiểu dữ liệu ở đâu là chứ typescript chứ không phải là strig nó là tập hợp con của kiểu dữ liệu string
nhưng nó chỉ lấy được 1 kiểu dữ liệu duy nhất thôi không thể lấy kiểu dữ liêu khác được 

lưu ý : khi omit type annotation , literal type sẽ được sử dụng vì sont chỉ nhậ dduwojc1 giá trị không thay dổi được 
khi cùng  const 
const count = 1; // const count kiểu dữ liệu là 1

const channelName= 'lhdsflkjdsl'; kiểu dữ liệu là lhdsflkjdsl

khi dùng let
let count = 1; // const count kiểu dữ liệu là number

let channelName= 'lhdsflkjdsl'; kiểu dữ liệu là string

vd const student = {
  id: 1,
  name: 'pham van tai',

} 
student.name= 'typescript' ;
 trong ví dụ const có thể thay đổi được  bởi gì nó là 1 object
 lưu ý : nếu muốn cái object này không thay đổi dduwowocj thì thêm  (as const )vào dưới cái object đó  và lúc đó object đó có kiểu dữ liệu là literal type 
 


 2 types assertion
 nó giúp typescript hiểu được dữ liệu của mình tốt hơn 
 thêm as vào để typescript hiểu hơn về dữ liệu của nó 
 lưu ý là nó nó liên hệ cha con với nhau nên nó mới thực hiện được còn khôn thì nó sẽ lỗi

function getStatusName (state: 'active'){
  console.log(state);

}
let s = 'active'; // lúc này typeScript nó hiệu được là s là string thì chạy s sẽ lỗi 
getStatusName(s as 'activc') thêm as vô thì nó sẽ hiểu được là kieur dữ liệu của getStatusName lúc này là 'activc'



3-2 type alias and interface

1 type alias 
là đăt tên mới cho kiểu dữ lieuj 
từ khóa đứng đâu là (type)
vd 
type StudentName = String // đặt tên mới cho kieur dữ liệu string 
còn interface thì không đăt được tên cho kieur dữ liệu dạng primitive được
  1-1 object types
  - dùng cho cả interface và types alias được 
  vd 

  type Student = {
    readonly ib: number;
    name: String ;
    age?: number; //optional kiểu dữ liệu có hoặc không có cũng được 
  }

   interface Student {
    readonly ib: number; thêm readonly thì đây là thuộc tính chỉ đọc và có thể gán giá trị cho nó 1 lần lúc khởi tọa nó và không thể thay đổi nó 
    name: String ;
    age?: number; //optional  kiểu dữ liệu có hoặc không có cũng được 
  }

  cả 2 cái đều đặt tên được nhưng ở types alias thì nó có = , còn interface thì có : , 
  - 1 điểm chung là cuối dòng lại là dấu ;

  1-2  union type
  -có thể kết hợp được 2 hoăc nhiều kiểu dữ liệu khác nhau 
  -Tạm dịch kết hợp 2 hoặc nhiều kiểu dữ liệu lại với nhau để tạo ra một kiểu dữ liệu mới.
-Cho phép giá trị có thể chấp nhận hoặc là kiểu dữ liệu này, hoặc là kiểu dữ liệu kia.
  vd 
    type Status = 'active' | 'inactive';
    type ProductStatus = 0 | 1 | 2 | 3;
    type StudentId = number | string;



    interface Student {
      id: number | string;
      name: string;
      gender: 'male' | 'female';
      grade: 'A' | 'B' | 'C' | 'D' | 'E';
    }
vd

    let x: number | string = 1;
  x = 'super';
  x = 123; 
  

  x = false; không gán được kieur boolean chỉ gán được string , number

1-3 intersection type &
 gom lại thuộc tính từ các interface hoặc types 
 lưu ý  : kết hợp kieur dữ liệu mà có tên giống nhau thì phải kiểu dữ liệu giống nhau chứ không thể khác nhau được nó sẽ lỗi 
 vd 
 interface BusinessPartner {
    name: string;
    credit: number;
}
  interface Identity {
    id: number;
    name: string;
}
  interface Contact {
    email: string;
    phone: string;
}
type Employee = Identity & Contact;
type Customer = BusinessPartner & Contact;

2 cách đặt tên type vs interface
dùng PascalCase  không nên dùng camlcase 
còn không nên dùng từ is ở đầu  tất cả các thư viện hay là DOM không dùng is đầu  tên biến

nên dùng interface  bởi vì nó có thể tùy biến được thay đổi được 

 
  

3-3 điều cần lưu ý khi làm  việc với function

function sayHello(){
   console.log('hi lô');

}   nêu không có chứ return thì hó hiểu và đưa về kiểu dữ liệu là void
-hoặc nó không quan tâm nó sẽ bỏ qua hàm này 

1 Explicit return type 
vd
 - function sum(a: number, b: number) {
        return a + b;
        }
        đoạn này thì hàm typescript nó sẽ tự hiểu ở kết qua return và nó trả về kiểu number
vd
 - function sum(a: number, b: number): number {
    return a + b;
}
- muốn đưa kiểu dữ liệu cụ thể thì dùng dấu : rồi dưa kiểu dữ liệu muốn đưa vào 
- còn nếu đưa về kiểu dữ liệu number mà return ra kiểu dữ liệu string thì nó sẽ lỗi 


  2 optinal and default parameter ?

  3 other type void and never




3-5 generics
1 là kiểu dữ liệu bình thường có thể nhận vào tham số trả về kiểu dữ liệu tương ứng
2 keyof là nó sẽ lấy ra tập hợp tất cả các danh sách key của dữ liệu đó 
